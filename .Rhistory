print(component_files)  # For diagnostic purposes
# Read each CSV file into a list
component_list <- lapply(component_files, read_csv)
names(component_list) <- basename(component_files)  # Optional: Set names
return(component_list)
}
# Load component_list_A and component_list_B from CSV files
component_list_A <- load_components_from_csv(components_dir, "component_A")
component_list_B <- load_components_from_csv(components_dir, "component_B")
# Directory where the components are stored
components_dir <- "results/ICA"
# Function to load components from CSV files into a list
load_components_from_csv <- function(dir_path, prefix) {
# List all CSV files in the directory with the specified prefix
component_files <- dir_ls(dir_path, glob = paste0(prefix, "*.csv"))
print(component_files)  # For diagnostic purposes
# Read each CSV file into a list
component_list <- lapply(component_files, read_csv)
names(component_list) <- basename(component_files)  # Optional: Set names
return(component_list)
}
# Load component_list_A and component_list_B from CSV files
component_list_A <- load_components_from_csv(components_dir, "component_A")
component_list_B <- load_components_from_csv(components_dir, "component_B")
# Ensure the fs package is loaded
library(fs)
# Create the "results/ICA" directory if it doesn't already exist
dir_create(path("results", "ICA"), recursive = TRUE)
# Function to save each matrix in the component list as a CSV
save_component_list_as_csv <- function(component_list, dir_path, prefix) {
for (i in seq_along(component_list)) {
file_path <- file.path(dir_path, paste0(prefix, "_", i, ".csv"))
write.csv(component_list[[i]], file_path, row.names = FALSE)
}
}
# Save component_list_A and component_list_B to "results/ICA" as CSV files
save_component_list_as_csv(component_list_A, "results/ICA/component_A", "component_A")
save_component_list_as_csv(component_list_B, "results/ICA/component_B", "component_B")
# Print a message to indicate completion
cat("All components have been saved as CSV in the 'results/ICA' directory.\n")
# Ensure the fs package is loaded
library(fs)
# Create the "results/ICA" directory if it doesn't already exist
dir_create(path("results", "ICA"), recursive = TRUE)
# Function to save each matrix in the component list as a CSV
save_component_list_as_csv <- function(component_list, dir_path, prefix) {
for (i in seq_along(component_list)) {
file_path <- file.path(dir_path, paste0(prefix, "_", i, ".csv"))
write.csv(component_list[[i]], file_path, row.names = FALSE)
}
}
# Save component_list_A and component_list_B to "results/ICA" as CSV files
save_component_list_as_csv(component_list_A, "results/ICA/component_A/", "component_A")
save_component_list_as_csv(component_list_B, "results/ICA/component_B/", "component_B")
# Print a message to indicate completion
cat("All components have been saved as CSV in the 'results/ICA' directory.\n")
# Directory where the components are stored
components_dir <- "results/ICA"
# Print out all files in the directory for diagnostic purposes
print(dir_ls(components_dir))
# Directory where the components are stored
components_dir <- "results/ICA"
# Function to load components from CSV files into a list
load_components_from_csv <- function(dir_path, prefix) {
# List all CSV files in the directory that start with the specified prefix
component_files <- dir_ls(dir_path, glob = paste0(prefix, "*.csv"))
# Read each CSV file into a list
component_list <- lapply(component_files, read_csv)
names(component_list) <- basename(component_files)  # Set names based on file names
return(component_list)
}
# Load all files starting with "component_A" into component_list_A
component_list_A <- load_components_from_csv(components_dir, "component_A")
# Directory where the components are stored
components_dir <- "results/ICA"
# Function to load components from CSV files into a list
load_components_from_csv <- function(dir_path, prefix) {
# List all CSV files in the directory that start with the specified prefix
component_files <- dir_ls(dir_path, glob = paste0(prefix, "*.csv"))
# Read each CSV file into a list
component_list <- lapply(component_files, read_csv)
names(component_list) <- basename(component_files)  # Set names based on file names
return(component_list)
}
# Load all files starting with "component_A" into component_list_A
component_list_A <- load_components_from_csv(components_dir, "component_A")
# Directory where the components are stored
components_dir <- "results/ICA"
# List all CSV files in the directory that start with "component_A"
component_files_A <- fs::dir_ls(components_dir, regexp = "^component_A.*\\.csv$")
# Read each CSV file into a data frame and store in a list
component_list_A <- lapply(component_files_A, read_csv)
# Directory where the components are stored
components_dir <- "results/ICA"
# List all CSV files in the directory that start with "component_A"
component_files_A <- fs::dir_ls(components_dir, regexp = "^component_A.*\\.csv$")
# Read each CSV file into a data frame and store in a list
component_list_A <- lapply(component_files_A, read_csv)
# Directory where the components are stored
components_dir <- "results/ICA"
# List all CSV files in the directory that start with "component_A"
component_files_A <- fs::dir_ls(components_dir, regexp = "^component_A.*\\.csv$")
# Read each CSV file into a data frame and store in a list
component_list_A <- lapply(component_files_A, read_csv)
# Directory where the components are stored
components_dir <- "results/ICA"
# List all CSV files in the directory that start with "component_A"
component_files_A <- fs::dir_ls(components_dir, glob = "component_A*.csv")
# Check the files selected
print(component_files_A)
# Read each CSV file into a data frame and store in a list
component_list_A <- lapply(component_files_A, read_csv)
# Directory where the components are stored
components_dir <- "results/ICA"
# Print out all files in the directory for diagnostic purposes
print(dir_ls(components_dir))
# List all CSV files in the directory that start with "component_A"
component_files_A <- fs::dir_ls(components_dir, glob = "component_A*.csv")
# Check the files selected
print(component_files_A)
# Read each CSV file into a data frame and store in a list
component_list_A <- lapply(component_files_A, read_csv)
# Directory where the components are stored
components_dir <- "results/ICA"
# List all CSV files in the directory that start with "component_A"
component_files_A <- fs::dir_ls(path = components_dir, glob = "component_A*.csv")
# Check the files selected
print(component_files_A)
# Read each CSV file into a data frame and store in a list
component_list_A <- lapply(component_files_A, read_csv)
# Directory where the components are stored
components_dir <- "results/ICA"
# Print out all files in the directory for diagnostic purposes
print(dir_ls(components_dir))
# List all CSV files in the directory that start with "component_A"
component_files_A <- fs::dir_ls(components_dir, glob = "component_A*.csv")
# Check the files selected
print(component_files_A)
# Read each CSV file into a data frame and store in a list
component_list_A <- lapply(component_files_A, read_csv)
# Directory where the components are stored
components_dir <- "results/ICA"
# List all CSV files in the directory that include "_A_" in their names
component_files_A <- fs::dir_ls(path = components_dir, glob = "*_A_*.csv")
# Check the files selected
print(component_files_A)
# Read each CSV file into a data frame and store in a list
component_list_A <- lapply(component_files_A, read_csv)
View(component_list_A)
# Directory where the components are stored
components_dir <- "results/ICA"
# List all CSV files in the directory that include "_A_" in their names
component_files_A <- fs::dir_ls(path = components_dir, glob = "*_A_*.csv")
# Check the files selected
print(component_files_A)
# Read each CSV file into a data frame and store in a list
component_list_A <- lapply(component_files_A, read_csv)
# List all CSV files in the directory that include "_B_" in their names
component_files_B <- fs::dir_ls(path = components_dir, glob = "*_B_*.csv")
# Check the files selected
print(component_files_B)
# Read each CSV file into a data frame and store in a list
component_list_B <- lapply(component_files_B, read_csv)
# Create empty vectors to store DTW distances, group numbers, and conditions
dtw_distances <- numeric(length(component_list_A))
group_numbers <- numeric(length(component_list_A))
conditions <- character(length(component_list_A))
# Loop through each pair of dataframes
for (i in seq_along(component_list_A)) {
# Extract group number and condition from the element name for component_list_A
matches <- regmatches(names(component_list_A)[i], regexec("group([0-9]+)_([^_]+)", names(component_list_A)[i]))
group_number <- as.numeric(matches[[1]][2])
condition <- matches[[1]][3]
# Calculate DTW distance for component_list_A
dtw_result <- dtw::dtw(component_list_A[[i]], component_list_B[[i]], keep = TRUE)
# Extract DTW distance for component_list_A
dtw_distance <- dtw_result$distance
# Print the DTW distance for component_list_A
print(paste("Group", group_number, condition, "DTW Distance:", dtw_distance))
# Store DTW distance, group number, and condition in the vectors
dtw_distances[i] <- dtw_distance
group_numbers[i] <- group_number
conditions[i] <- condition
}
View(component_list_A[["results/ICA/component_A_1.csv"]])
# Create a data frame with results
dtw_results_df <- data.frame(Group = group_numbers, Condition = conditions, DTW_Distance = dtw_distances)
# Print overall summary or take further actions with dtw_distances vector
cat("Summary of DTW Distances:\n")
summary(dtw_distances)
# Display the data frame with results
print(dtw_results_df)
## Setup chunk
knitr::opts_chunk$set(echo = TRUE, include = TRUE, message = FALSE, warning = FALSE)
pacman::p_load(
"XML",
"tidyverse",
"fs",
"assertthat",
"stringi",
"dtw",
"RTransferEntropy",
"signal",
"conflicted",
"Rcpp",
"future",
"fastICA",
"groupICA",
"dtw",
"dplyr",
"plotly",
"htmlwidgets",
"hrbrthemes",
"zoo"
)
conflicts_prefer(dplyr::filter)
## Making sure we are in the right directory
wd <- getwd()
if (basename(wd) != "PerceptionActionExam") {
setwd("./PerceptionActionExam")
}
##NADIA PATH##
# data_dir <- path_home() %>%
#   path("Documents", "GitHub", "PerceptionActionExam-Clean-up-attempt", "data", "tsvs") ## Nadia's path
#KATHARINA PATH##
data_dir <- path_home() %>%
path("Desktop","UNI", "3.semester", "Perception & Action", "PerceptionActionExam", "data", "tsvs") ## Katharina's path
#Aesthetic setup
theme_set(theme_ipsum(base_family = "Times New Roman"))
global_fill_colour <- "#8d5b5a"
aesthetic_palette <- c(
"#d8aeb5","#c17f8c","#b59592","#9b6f69","#a94f62","#8d5b5a","#684141","#733545","#523438","#48222b","#2f1a1b")
aesthetic_highlight_difference_palette <- c("#d8aeb5","#2f1a1b")
## Setup chunk
knitr::opts_chunk$set(echo = TRUE, include = TRUE, message = FALSE, warning = FALSE)
pacman::p_load(
"XML",
"tidyverse",
"fs",
"assertthat",
"stringi",
"dtw",
"RTransferEntropy",
"signal",
"conflicted",
"Rcpp",
"future",
"fastICA",
"groupICA",
"dtw",
"dplyr",
"plotly",
"htmlwidgets",
"hrbrthemes",
"zoo"
)
conflicts_prefer(dplyr::filter)
## Making sure we are in the right directory
wd <- getwd()
if (basename(wd) != "PerceptionActionExam") {
setwd("./PerceptionActionExam")
}
##NADIA PATH##
# data_dir <- path_home() %>%
#   path("Documents", "GitHub", "PerceptionActionExam-Clean-up-attempt", "data", "tsvs") ## Nadia's path
#KATHARINA PATH##
data_dir <- path_home() %>%
path("Desktop","UNI", "3.semester", "Perception & Action", "PerceptionActionExam", "data", "tsvs") ## Katharina's path
#Aesthetic setup
theme_set(theme_ipsum(base_family = "Times New Roman"))
global_fill_colour <- "#8d5b5a"
aesthetic_palette <- c(
"#d8aeb5","#c17f8c","#b59592","#9b6f69","#a94f62","#8d5b5a","#684141","#733545","#523438","#48222b","#2f1a1b")
aesthetic_highlight_difference_palette <- c("#d8aeb5","#2f1a1b")
## Setup chunk
knitr::opts_chunk$set(echo = TRUE, include = TRUE, message = FALSE, warning = FALSE)
pacman::p_load(
"XML",
"tidyverse",
"fs",
"assertthat",
"stringi",
"dtw",
"RTransferEntropy",
"signal",
"conflicted",
"Rcpp",
"future",
"fastICA",
"groupICA",
"dtw",
"dplyr",
"plotly",
"htmlwidgets",
"hrbrthemes",
"zoo"
)
conflicts_prefer(dplyr::filter)
## Making sure we are in the right directory
wd <- getwd()
if (basename(wd) != "PerceptionActionExam") {
setwd("./PerceptionActionExam")
}
##NADIA PATH##
# data_dir <- path_home() %>%
#   path("Documents", "GitHub", "PerceptionActionExam-Clean-up-attempt", "data", "tsvs") ## Nadia's path
#KATHARINA PATH##
data_dir <- path_home() %>%
path("Desktop","UNI", "3.semester", "Perception & Action", "PerceptionActionExam", "data", "tsvs") ## Katharina's path
#Aesthetic setup
theme_set(theme_ipsum(base_family = "Times New Roman"))
global_fill_colour <- "#8d5b5a"
aesthetic_palette <- c(
"#d8aeb5","#c17f8c","#b59592","#9b6f69","#a94f62","#8d5b5a","#684141","#733545","#523438","#48222b","#2f1a1b")
aesthetic_highlight_difference_palette <- c("#d8aeb5","#2f1a1b")
# List all CSV files in the directory
list_of_dataframes <- fs::dir_ls("data/mocap_data_prepped", regexp = "\\.csv$")
# Read each CSV file into a data frame and store in a list
list_of_dataframes <- lapply(list_of_dataframes, read_csv)
list_of_dataframes_A <- list()
list_of_dataframes_B <- list()
# Get the names of the original dataframes
original_names <- names(list_of_dataframes)
for (i in seq_along(list_of_dataframes)) {
df <- list_of_dataframes[[i]]
df_name <- original_names[i]
# Split the dataframe based on 'subject' and omit rows with NAs
df_A <- na.omit(df[df$subject == 'A', ])
df_B <- na.omit(df[df$subject == 'B', ])
# Add the split and cleaned dataframes to their respective lists with modified names
if(nrow(df_A) > 0) {
list_of_dataframes_A[[paste(df_name, "A", sep = "_")]] <- df_A
}
if(nrow(df_B) > 0) {
list_of_dataframes_B[[paste(df_name, "B", sep = "_")]] <- df_B
}
}
rm(df, df_A, df_B, i, df_name)
# Function to convert a dataframe to a matrix with standardized values for ICA
convert_df_to_matrix_for_ICA <- function(df) {
# Ensure the dataframe is sorted by elapsed_time
df_sorted <- df %>% arrange(elapsed_time)
# Select only numeric columns
df_numeric <- df_sorted %>% select(where(is.numeric))
# Standardize the data
df_standardized <- as.data.frame(scale(df_numeric))
# Return as matrix
return(as.matrix(df_standardized))
}
# Convert each dataframe in list_of_dataframes_A to a matrix for ICA
matrices_A <- lapply(list_of_dataframes_A, convert_df_to_matrix_for_ICA)
# Convert each dataframe in list_of_dataframes_B to a matrix for ICA
matrices_B <- lapply(list_of_dataframes_B, convert_df_to_matrix_for_ICA)
# Check for NAs in matrices_A
any(is.na(unlist(matrices_A)))
# Check for NAs in matrices_B
any(is.na(unlist(matrices_B)))
View(matrices_A)
# Assuming matrices_A and matrices_B are lists of matrices with same structure
for (i in seq_along(matrices_A)) {
matrix_A <- matrices_A[[i]]
matrix_B <- matrices_B[[i]]
# Ensure matrices have the same dimensions
if (all(dim(matrix_A) == dim(matrix_B))) {
# Perform your comparison here
# Example: Compute and compare means of each column
mean_diff <- colMeans(matrix_A) - colMeans(matrix_B)
print(mean_diff)
} else {
warning(paste("Matrices at index", i, "do not match in dimensions."))
}
}
# Assuming matrices_A and matrices_B are lists of matrices with same structure
for (i in seq_along(matrices_A)) {
matrix_A <- matrices_A[[i]]
matrix_B <- matrices_B[[i]]
# Ensure matrices have the same dimensions
if (all(dim(matrix_A) == dim(matrix_B))) {
# Perform your comparison here
# Example: Compute and compare means of each column
mean_diff <- colMeans(matrix_A) - colMeans(matrix_B)
print(mean_diff)
} else {
warning(paste("Matrices at index", i, "do not match in dimensions."))
}
}
View(matrix_A)
# Check for NAs in matrices_A
any(is.na(unlist(matrices_A)))
# Check for NAs in matrices_B
any(is.na(unlist(matrices_B)))
rm(matrix_A, matrix_B)
# Check for NAs in matrices_A
any(is.na(unlist(matrices_A)))
# Check for NAs in matrices_B
any(is.na(unlist(matrices_B)))
rm(matrix_A, matrix_B,i, original_names)
View(matrices_A)
component_list_A[["results/ICA/component_A_1.csv"]]
matrices_A[["data/mocap_data_prepped/group0_jointlead.csv_A"]]
## Setup chunk
knitr::opts_chunk$set(echo = TRUE, include = TRUE, message = FALSE, warning = FALSE)
pacman::p_load(
"XML",
"tidyverse",
"fs",
"assertthat",
"stringi",
"dtw",
"RTransferEntropy",
"signal",
"conflicted",
"Rcpp",
"future",
"fastICA",
"groupICA",
"dtw",
"dplyr",
"plotly",
"htmlwidgets",
"hrbrthemes",
"zoo"
)
conflicts_prefer(dplyr::filter)
## Making sure we are in the right directory
wd <- getwd()
if (basename(wd) != "PerceptionActionExam") {
setwd("./PerceptionActionExam")
}
##NADIA PATH##
# data_dir <- path_home() %>%
#   path("Documents", "GitHub", "PerceptionActionExam-Clean-up-attempt", "data", "tsvs") ## Nadia's path
#KATHARINA PATH##
data_dir <- path_home() %>%
path("Desktop","UNI", "3.semester", "Perception & Action", "PerceptionActionExam", "data", "tsvs") ## Katharina's path
#Aesthetic setup
theme_set(theme_ipsum(base_family = "Times New Roman"))
global_fill_colour <- "#8d5b5a"
aesthetic_palette <- c(
"#d8aeb5","#c17f8c","#b59592","#9b6f69","#a94f62","#8d5b5a","#684141","#733545","#523438","#48222b","#2f1a1b")
aesthetic_highlight_difference_palette <- c("#d8aeb5","#2f1a1b")
# List all CSV files in the directory
list_of_dataframes <- fs::dir_ls("data/mocap_data_prepped", regexp = "\\.csv$")
# Read each CSV file into a data frame and store in a list
list_of_dataframes <- lapply(list_of_dataframes, read_csv)
View(list_of_dataframes)
View(list_of_dataframes[["data/mocap_data_prepped/group0_jointlead.csv"]])
list_of_dataframes_A <- list()
list_of_dataframes_B <- list()
# Get the names of the original dataframes
original_names <- names(list_of_dataframes)
for (i in seq_along(list_of_dataframes)) {
df <- list_of_dataframes[[i]]
df_name <- original_names[i]
# Split the dataframe based on 'subject' and omit rows with NAs
df_A <- na.omit(df[df$subject == 'A', ])
df_B <- na.omit(df[df$subject == 'B', ])
# Add the split and cleaned dataframes to their respective lists with modified names
if(nrow(df_A) > 0) {
list_of_dataframes_A[[paste(df_name, "A", sep = "_")]] <- df_A
}
if(nrow(df_B) > 0) {
list_of_dataframes_B[[paste(df_name, "B", sep = "_")]] <- df_B
}
}
rm(df, df_A, df_B, i, df_name)
View(list_of_dataframes_A)
## Setup chunk
knitr::opts_chunk$set(echo = TRUE, include = TRUE, message = FALSE, warning = FALSE)
pacman::p_load(
"XML",
"tidyverse",
"fs",
"assertthat",
"stringi",
"dtw",
"RTransferEntropy",
"signal",
"conflicted",
"Rcpp",
"future",
"fastICA",
"groupICA",
"dtw",
"dplyr",
"plotly",
"htmlwidgets",
"hrbrthemes",
"zoo"
)
conflicts_prefer(dplyr::filter)
## Making sure we are in the right directory
wd <- getwd()
if (basename(wd) != "PerceptionActionExam") {
setwd("./PerceptionActionExam")
}
##NADIA PATH##
# data_dir <- path_home() %>%
#   path("Documents", "GitHub", "PerceptionActionExam-Clean-up-attempt", "data", "tsvs") ## Nadia's path
#KATHARINA PATH##
data_dir <- path_home() %>%
path("Desktop","UNI", "3.semester", "Perception & Action", "PerceptionActionExam", "data", "tsvs") ## Katharina's path
#Aesthetic setup
theme_set(theme_ipsum(base_family = "Times New Roman"))
global_fill_colour <- "#8d5b5a"
aesthetic_palette <- c(
"#d8aeb5","#c17f8c","#b59592","#9b6f69","#a94f62","#8d5b5a","#684141","#733545","#523438","#48222b","#2f1a1b")
aesthetic_highlight_difference_palette <- c("#d8aeb5","#2f1a1b")
# List all CSV files in the directory
list_of_dataframes <- fs::dir_ls("data/mocap_data_prepped", regexp = "\\.csv$")
# Read each CSV file into a data frame and store in a list
list_of_dataframes <- lapply(list_of_dataframes, read_csv)
