process_batch <- function(start_idx, end_idx, component_list_A, component_list_B, PCA_component_weights) {
results <- data.frame(Component_A = character(0),
Component_B = character(0),
Weighted_DTW_Component_1 = numeric(0),
Weighted_DTW_Component_2 = numeric(0),
DTW_Sum = numeric(0))
idx <- 1
for (a_name in names(component_list_A)) {
if (grepl("_jointlead_A$", a_name)) {
component_a <- component_list_A[[a_name]]
groupid_a <- sub("_A$", "", a_name)
weight_a <- PCA_component_weights[PCA_component_weights$groupid == groupid_a, ]
for (b_name in names(component_list_B)) {
if (grepl("_jointlead_B$", b_name) && idx >= start_idx && idx <= end_idx) {
component_b <- component_list_B[[b_name]]
# Calculating DTW for both components and their weighted sum
for (i in 1:2) {
dtw_result <- dtw(component_a[, i], component_b[, i], keep = TRUE)$distance
weight <- ifelse(i == 1, weight_a$dimension_1_weight, 1 - weight_a$dimension_1_weight)
results[idx, paste("Weighted_DTW_Component", i, sep = "_")] <- dtw_result * weight
}
results[idx, "DTW_Sum"] <- sum(results[idx, 3:4])
results[idx, c("Component_A", "Component_B")] <- c(a_name, b_name)
idx <- idx + 1
}
}
}
}
return(results)
}
# Process in batches and combine results
batch_size <- 5  # Adjust the batch size based on your data size and memory
total_comparisons <- length(grep("_jointlead_A$", names(component_list_A))) *
length(grep("_jointlead_B$", names(component_list_B)))
# Load the dtw library
library(dtw)
# Function to process a batch of comparisons for 'jointlead'
process_batch_jointlead <- function(start_idx, end_idx, component_list_A, component_list_B, PCA_component_weights) {
results <- data.frame(Component_A = character(0),
Component_B = character(0),
Weighted_DTW_Component_1 = numeric(0),
Weighted_DTW_Component_2 = numeric(0),
DTW_Sum = numeric(0))
idx <- 1
for (a_name in names(component_list_A)) {
if (grepl("_jointlead_A$", a_name)) {
component_a <- component_list_A[[a_name]]
groupid_a <- sub("_A$", "", a_name)
weight_a <- PCA_component_weights[PCA_component_weights$groupid == groupid_a, ]
for (b_name in names(component_list_B)) {
if (grepl("_jointlead_B$", b_name) && idx >= start_idx && idx <= end_idx) {
component_b <- component_list_B[[b_name]]
# Calculating DTW for both components and their weighted sum
for (i in 1:2) {
dtw_result <- dtw(component_a[, i], component_b[, i], keep = TRUE)$distance
weight <- ifelse(i == 1, weight_a$dimension_1_weight, 1 - weight_a$dimension_1_weight)
results[idx, paste("Weighted_DTW_Component", i, sep = "_")] <- dtw_result * weight
}
results[idx, "DTW_Sum"] <- sum(results[idx, 3:4])
results[idx, c("Component_A", "Component_B")] <- c(a_name, b_name)
idx <- idx + 1
}
}
}
}
return(results)
}
# Initialize batch processing for 'jointlead'
batch_size_jointlead <- 5  # Adjust the batch size based on your data size and memory
total_comparisons_jointlead <- length(grep("_jointlead_A$", names(component_list_A))) *
length(grep("_jointlead_B$", names(component_list_B)))
# Load the dtw library
library(dtw)
# Initialize a dataframe to store the results for false pairs
dtw_results_df_false_pairs <- data.frame(DF_Name_A = character(0),
DF_Name_B = character(0),
DTW_Component_1 = numeric(0),
DTW_Component_2 = numeric(0))
# Retrieve the names of the dataframes in component_list_A and component_list_B
df_names_A <- names(component_list_A)
# Load the dtw library
library(dtw)
# Initialize a dataframe to store the results for false pairs
dtw_results_df_false_pairs <- data.frame(DF_Name_A = character(0),
DF_Name_B = character(0),
DTW_Component_1 = numeric(0),
DTW_Component_2 = numeric(0))
# Retrieve the names of the dataframes in component_list_A and component_list_B
df_names_A <- names(component_list_A)
## Setup chunk
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
pacman::p_load(
"XML",
"tidyverse",
"fs",
"assertthat",
"stringi",
"dtw",
"RTransferEntropy",
"signal",
"conflicted",
"Rcpp",
"future",
"dtw",
"dplyr",
"plotly",
"htmlwidgets",
"hrbrthemes",
"zoo"
)
conflicts_prefer(dplyr::filter)
## Making sure we are in the right directory
wd <- getwd()
if (basename(wd) != "PerceptionActionExam") {
setwd("./PerceptionActionExam")
}
##NADIA PATH##
data_dir <- path_home() %>%
path("Documents", "GitHub", "PerceptionActionExam-Clean-up-attempt", "data", "tsvs") ## Nadia's path
#KATHARINA PATH##
#data_dir <- path_home() %>%
# path("Desktop","UNI", "3.semester", "Perception & Action", "PerceptionActionExam", "data", "tsvs") ## Katharina's path
#Aesthetic setup
theme_set(theme_ipsum(base_family = "Times New Roman"))
global_fill_colour <- "#8d5b5a"
aesthetic_palette <- c(
"#d8aeb5","#c17f8c","#b59592","#9b6f69","#a94f62","#8d5b5a","#684141","#733545","#523438","#48222b","#2f1a1b")
aesthetic_highlight_difference_palette <- c("#d8aeb5","#2f1a1b")
# Directory where the components are stored
components_dir <- "results/PCA"
#IMPORTING ALL COMPONENTS FROM A#
# List all CSV files in the directory that include "_A" in their names
component_files_A <- fs::dir_ls(path = components_dir, glob = "*_A.csv")
component_list_A <- list()
# Loop through each CSV file, read it into a dataframe, and store it in the list with its original file name
for (csv_file in component_files_A) {
# Extract the file name without the extension
file_name <- tools::file_path_sans_ext(basename(csv_file))
# Read the CSV file into a dataframe and assign it to the list with the file name as the list name
component_list_A[[file_name]] <- read.csv(csv_file)
}
#IMPORTING ALL COMPONENTS FROM B#
# List all CSV files in the directory that include "_B" in their names
component_files_B <- fs::dir_ls(path = components_dir, glob = "*_B.csv")
component_list_B <- list()
# Loop through each CSV file, read it into a dataframe, and store it in the list with its original file name
for (csv_file in component_files_B) {
# Extract the file name without the extension
file_name <- tools::file_path_sans_ext(basename(csv_file))
# Read the CSV file into a dataframe and assign it to the list with the file name as the list name
component_list_B[[file_name]] <- read.csv(csv_file)
}
#IMPORTING COMPONENT WEIGHTS#
PCA_component_weights <- read_csv("results/PCAcomponentweights.csv")
# Load the dtw library
library(dtw)
# Initialize a dataframe to store the results
dtw_results_df_combined <- data.frame(DF_Name = character(0), # Add a column for dataframe names
DTW_Component_1 = numeric(0),
DTW_Component_2 = numeric(0))
# Retrieve the names of the dataframes in component_list_A
df_names <- names(component_list_A)
# Loop through each index in the component lists
for (i in seq_along(component_list_A)) {
# Select the i-th dataframe from each list
component_A_df <- component_list_A[[i]]
component_B_df <- component_list_B[[i]]
# Extract the first PCA component from each dataframe
component_A_1 <- component_A_df[, 1] # Assuming the first column is the first PCA component
component_B_1 <- component_B_df[, 1] # Same assumption for component_list_B
# Calculate DTW distance for the first PCA component
dtw_distance_1 <- dtw(component_A_1, component_B_1, keep = TRUE)$distance
# Extract the second PCA component from each dataframe
component_A_2 <- component_A_df[, 2] # Assuming the second column is the second PCA component
component_B_2 <- component_B_df[, 2] # Same assumption for component_list_B
# Calculate DTW distance for the second PCA component
dtw_distance_2 <- dtw(component_A_2, component_B_2, keep = TRUE)$distance
# Add the results to the dataframe
dtw_results_df_combined <- rbind(dtw_results_df_combined,
data.frame(DF_Name = df_names[i], # Use the dataframe name
DTW_Component_1 = dtw_distance_1,
DTW_Component_2 = dtw_distance_2))
}
# Print and view the dataframe
print(dtw_results_df_combined)
# Add columns for weighted DTW distances and their sum
dtw_results_df_combined$Weighted_DTW_Component_1 <- numeric(nrow(dtw_results_df_combined))
dtw_results_df_combined$Weighted_DTW_Component_2 <- numeric(nrow(dtw_results_df_combined))
dtw_results_df_combined$DTW_Sum <- numeric(nrow(dtw_results_df_combined))
# Loop through each row in the dtw_results_df_combined
for (i in 1:nrow(dtw_results_df_combined)) {
# Extract the groupid from the name of the corresponding dataframe in component_list_A
# This assumes the name format in component_list_A is something like "groupid_A"
groupid <- sub("_A$", "", dtw_results_df_combined$DF_Name[i])
# Find the corresponding row in PCA_component_weights
matched_row <- PCA_component_weights[PCA_component_weights$groupid == groupid, ]
# Extract the weight for the first dimension
weight_1 <- matched_row$dimension_1_weight
# Apply weights
dtw_results_df_combined$Weighted_DTW_Component_1[i] <- dtw_results_df_combined$DTW_Component_1[i] * weight_1
dtw_results_df_combined$Weighted_DTW_Component_2[i] <- dtw_results_df_combined$DTW_Component_2[i] * (1 - weight_1)
# Calculate the sum
dtw_results_df_combined$DTW_Sum[i] <- dtw_results_df_combined$Weighted_DTW_Component_1[i] + dtw_results_df_combined$Weighted_DTW_Component_2[i]
}
# Rename the dataframe for consistency
dtw_results_df <- dtw_results_df_combined
# Print the updated dataframe with the summed column
print(dtw_results_df)
# Saving it as dtw_results_df_PCA
write.csv(dtw_results_df, "results/dtw_results_df.csv", row.names = FALSE)
# Load the dtw library
library(dtw)
# Initialize a dataframe to store the results for false pairs
dtw_results_df_false_pairs <- data.frame(DF_Name_A = character(0),
DF_Name_B = character(0),
DTW_Component_1 = numeric(0),
DTW_Component_2 = numeric(0))
# Retrieve the names of the dataframes in component_list_A and component_list_B
df_names_A <- names(component_list_A)
df_names_B <- names(component_list_B)
# Loop through each element of component_list_A
for (i in seq_along(component_list_A)) {
# Select the i-th dataframe from component_list_A
component_A_df <- component_list_A[[i]]
# Loop through each element of component_list_B
for (j in seq_along(component_list_B)) {
# Select the j-th dataframe from component_list_B
component_B_df <- component_list_B[[j]]
# Extract the first PCA component from each dataframe
component_A_1 <- component_A_df[, 1] # Assuming the first column is the first PCA component
component_B_1 <- component_B_df[, 1] # Same assumption for component_list_B
# Calculate DTW distance for the first PCA component
dtw_distance_1 <- dtw(component_A_1, component_B_1, keep = TRUE)$distance
# Extract the second PCA component from each dataframe
component_A_2 <- component_A_df[, 2] # Assuming the second column is the second PCA component
component_B_2 <- component_B_df[, 2] # Same assumption for component_list_B
# Calculate DTW distance for the second PCA component
dtw_distance_2 <- dtw(component_A_2, component_B_2, keep = TRUE)$distance
# Add the results to the dataframe
dtw_results_df_false_pairs <- rbind(dtw_results_df_false_pairs,
data.frame(DF_Name_A = df_names_A[i],
DF_Name_B = df_names_B[j],
DTW_Component_1 = dtw_distance_1,
DTW_Component_2 = dtw_distance_2))
}
}
# Print and view the dataframe for false pairs
print(dtw_results_df_false_pairs)
# Load the dtw library
library(dtw)
# Initialize a dataframe to store the results for "_jointlead" combinations
dtw_results_df_jointlead <- data.frame(DF_Name_A = character(0),
DF_Name_B = character(0),
DTW_Component_1 = numeric(0),
DTW_Component_2 = numeric(0))
# Retrieve the names of the dataframes in component_list_A and component_list_B
df_names_A <- names(component_list_A)
df_names_B <- names(component_list_B)
# Loop through each element of component_list_A for "_jointlead"
for (i in seq_along(component_list_A)) {
if (grepl("_jointlead$", df_names_A[i])) {
component_A_df <- component_list_A[[i]]
for (j in seq_along(component_list_B)) {
if (grepl("_jointlead$", df_names_B[j])) {
component_B_df <- component_list_B[[j]]
# Extract and calculate DTW for each PCA component
component_A_1 <- component_A_df[, 1]
component_B_1 <- component_B_df[, 1]
dtw_distance_1 <- dtw(component_A_1, component_B_1, keep = TRUE)$distance
component_A_2 <- component_A_df[, 2]
component_B_2 <- component_B_df[, 2]
dtw_distance_2 <- dtw(component_A_2, component_B_2, keep = TRUE)$distance
# Add the results to the dataframe
dtw_results_df_jointlead <- rbind(dtw_results_df_jointlead,
data.frame(DF_Name_A = df_names_A[i],
DF_Name_B = df_names_B[j],
DTW_Component_1 = dtw_distance_1,
DTW_Component_2 = dtw_distance_2))
}
}
}
}
# Print and view the dataframe for "_jointlead" combinations
print(dtw_results_df_jointlead)
# Load the dtw library
library(dtw)
# Initialize vectors to store results
dtw_results_df_jointlead <- data.frame(Component_A = character(0),
Component_B = character(0),
Weighted_DTW_Component_1 = numeric(0),
Weighted_DTW_Component_2 = numeric(0),
DTW_Sum = numeric(0))
# Function to process a batch of comparisons
process_batch <- function(start_idx, end_idx, component_list_A, component_list_B, PCA_component_weights) {
results <- data.frame(Component_A = character(0),
Component_B = character(0),
Weighted_DTW_Component_1 = numeric(0),
Weighted_DTW_Component_2 = numeric(0),
DTW_Sum = numeric(0))
idx <- 1
for (a_name in names(component_list_A)) {
if (grepl("_jointlead_A$", a_name)) {
component_a <- component_list_A[[a_name]]
groupid_a <- sub("_A$", "", a_name)
weight_a <- PCA_component_weights[PCA_component_weights$groupid == groupid_a, ]
for (b_name in names(component_list_B)) {
if (grepl("_jointlead_B$", b_name) && idx >= start_idx && idx <= end_idx) {
component_b <- component_list_B[[b_name]]
# Calculating DTW for both components and their weighted sum
for (i in 1:2) {
dtw_result <- dtw(component_a[, i], component_b[, i], keep = TRUE)$distance
weight <- ifelse(i == 1, weight_a$dimension_1_weight, 1 - weight_a$dimension_1_weight)
results[idx, paste("Weighted_DTW_Component", i, sep = "_")] <- dtw_result * weight
}
results[idx, "DTW_Sum"] <- sum(results[idx, 3:4])
results[idx, c("Component_A", "Component_B")] <- c(a_name, b_name)
idx <- idx + 1
}
}
}
}
return(results)
}
# Process in batches and combine results
batch_size <- 5  # Adjust the batch size based on your data size and memory
total_comparisons <- length(grep("_jointlead_A$", names(component_list_A))) *
length(grep("_jointlead_B$", names(component_list_B)))
results_df_list <- lapply(seq(1, total_comparisons, by = batch_size), function(x) {
end_idx <- min(x + batch_size - 1, total_comparisons)
process_batch(x, end_idx, component_list_A, component_list_B, PCA_component_weights)
})
if (length(results_df_list) > 0) {
dtw_results_df_jointlead <- do.call(rbind, results_df_list)
print(dtw_results_df_jointlead)
} else {
cat("No matching pairs found for '_jointlead_A' and '_jointlead_B'")
}
# Saving the results
write.csv(dtw_results_df_jointlead, "results/dtw_results_df_jointlead.csv", row.names = FALSE)
# Load the dtw library
library(dtw)
# Initialize vectors to store results
dtw_results_df_jointlead <- data.frame(Component_A = character(0),
Component_B = character(0),
Weighted_DTW_Component_1 = numeric(0),
Weighted_DTW_Component_2 = numeric(0),
DTW_Sum = numeric(0))
# Function to process a batch of comparisons
process_batch <- function(start_idx, end_idx, component_list_A, component_list_B, PCA_component_weights) {
results <- data.frame(Component_A = character(0),
Component_B = character(0),
Weighted_DTW_Component_1 = numeric(0),
Weighted_DTW_Component_2 = numeric(0),
DTW_Sum = numeric(0))
idx <- 1
for (a_name in names(component_list_A)) {
if (grepl("_jointlead_A$", a_name)) {
component_a <- component_list_A[[a_name]]
groupid_a <- sub("_A$", "", a_name)
weight_a <- PCA_component_weights[PCA_component_weights$groupid == groupid_a, ]
for (b_name in names(component_list_B)) {
if (grepl("_jointlead_B$", b_name) && idx >= start_idx && idx <= end_idx) {
component_b <- component_list_B[[b_name]]
# Calculating DTW for both components and their weighted sum
for (i in 1:2) {
dtw_result <- dtw(component_a[, i], component_b[, i], keep = TRUE)$distance
weight <- ifelse(i == 1, weight_a$dimension_1_weight, 1 - weight_a$dimension_1_weight)
results[idx, paste("Weighted_DTW_Component", i, sep = "_")] <- dtw_result * weight
}
results[idx, "DTW_Sum"] <- sum(results[idx, 3:4])
results[idx, c("Component_A", "Component_B")] <- c(a_name, b_name)
idx <- idx + 1
}
}
}
}
return(results)
}
# Process in batches and combine results
batch_size <- 5  # Adjust the batch size based on your data size and memory
total_comparisons <- length(grep("_jointlead_A$", names(component_list_A))) *
length(grep("_jointlead_B$", names(component_list_B)))
results_df_list <- lapply(seq(1, total_comparisons, by = batch_size), function(x) {
end_idx <- min(x + batch_size - 1, total_comparisons)
process_batch(x, end_idx, component_list_A, component_list_B, PCA_component_weights)
})
if (length(results_df_list) > 0) {
dtw_results_df_jointlead <- do.call(rbind, results_df_list)
print(dtw_results_df_jointlead)
} else {
cat("No matching pairs found for '_jointlead_A' and '_jointlead_B'")
}
# Saving the results
write.csv(dtw_results_df_jointlead, "results/dtw_results_df_jointlead.csv", row.names = FALSE)
View(dtw_results_df_jointlead)
# Load the dtw library
library(dtw)
# Initialize vectors to store results
dtw_results_df_jointlead <- data.frame(Component_A = character(0),
Component_B = character(0),
PCA_Component = integer(0),
DTW_Distance = numeric(0))
# Function to process a batch of comparisons
process_batch <- function(start_idx, end_idx, component_list_A, component_list_B, PCA_component_weights) {
results <- data.frame(Component_A = character(0),
Component_B = character(0),
PCA_Component = integer(0),
DTW_Distance = numeric(0))
idx <- 1
for (a_name in names(component_list_A)) {
if (grepl("_jointlead_A$", a_name)) {
component_a <- component_list_A[[a_name]]
groupid_a <- sub("_A$", "", a_name)
weight_a <- PCA_component_weights[PCA_component_weights$groupid == groupid_a, ]
for (i in 1:ncol(component_a)) {
for (b_name in names(component_list_B)) {
if (grepl("_jointlead_B$", b_name) && idx >= start_idx && idx <= end_idx) {
component_b <- component_list_B[[b_name]]
# Check if B has the same number of components as A
if (ncol(component_b) >= i) {
dtw_result <- dtw(component_a[, i], component_b[, i], keep = TRUE)$distance
weight <- ifelse(i == 1, weight_a$dimension_1_weight, 1 - weight_a$dimension_1_weight)
weighted_dtw <- dtw_result * weight
# Add the results to the dataframe
results <- rbind(results,
data.frame(Component_A = a_name,
Component_B = b_name,
PCA_Component = i,
DTW_Distance = weighted_dtw))
}
idx <- idx + 1
}
}
}
}
}
return(results)
}
# Process in batches and combine results
batch_size <- 5  # Adjust the batch size based on your data size and memory
total_comparisons <- sum(sapply(component_list_A, ncol)) * length(grep("_jointlead_B$", names(component_list_B)))
results_df_list <- lapply(seq(1, total_comparisons, by = batch_size), function(x) {
end_idx <- min(x + batch_size - 1, total_comparisons)
process_batch(x, end_idx, component_list_A, component_list_B, PCA_component_weights)
})
if (length(results_df_list) > 0) {
dtw_results_df_jointlead <- do.call(rbind, results_df_list)
print(dtw_results_df_jointlead)
} else {
cat("No matching pairs found for '_jointlead_A' and '_jointlead_B'")
}
# Saving the results
write.csv(dtw_results_df_jointlead, "results/dtw_results_df_jointlead.csv", row.names = FALSE)
# Load the dtw library
library(dtw)
# Initialize vectors to store results
dtw_results_df_jointlead <- data.frame(Component_A = character(0),
Component_B = character(0),
PCA_Component = integer(0),
DTW_Distance = numeric(0))
# Function to process a batch of comparisons
process_batch <- function(start_idx, end_idx, component_list_A, component_list_B, PCA_component_weights) {
results <- data.frame(Component_A = character(0),
Component_B = character(0),
PCA_Component = integer(0),
DTW_Distance = numeric(0))
idx <- 1
for (a_name in names(component_list_A)) {
if (grepl("_jointlead_A$", a_name)) {
component_a <- component_list_A[[a_name]]
groupid_a <- sub("_A$", "", a_name)
weight_a <- PCA_component_weights[PCA_component_weights$groupid == groupid_a, ]
for (i in 1:ncol(component_a)) {
for (b_name in names(component_list_B)) {
if (grepl("_jointlead_B$", b_name)) {
for (j in 1:ncol(component_list_B[[b_name]])) {
if (idx >= start_idx && idx <= end_idx) {
component_b <- component_list_B[[b_name]]
dtw_result <- dtw(component_a[, i], component_b[, j], keep = TRUE)$distance
weight <- ifelse(i == 1, weight_a$dimension_1_weight, 1 - weight_a$dimension_1_weight)
weighted_dtw <- dtw_result * weight
# Add the results to the dataframe
results <- rbind(results,
data.frame(Component_A = a_name,
Component_B = b_name,
PCA_Component = i,
DTW_Distance = weighted_dtw))
}
idx <- idx + 1
}
}
}
}
}
}
return(results)
}
# Determine the total number of comparisons
total_comparisons <- sum(sapply(component_list_A, ncol)) * sum(sapply(component_list_B, ncol))
# Process in batches and combine results
batch_size <- 5  # Adjust the batch size based on your data size and memory
results_df_list <- lapply(seq(1, total_comparisons, by = batch_size), function(x) {
end_idx <- min(x + batch_size - 1, total_comparisons)
process_batch(x, end_idx, component_list_A, component_list_B, PCA_component_weights)
})
if (length(results_df_list) > 0) {
dtw_results_df_jointlead <- do.call(rbind, results_df_list)
print(dtw_results_df_jointlead)
} else {
cat("No matching pairs found for '_jointlead_A' and '_jointlead_B'")
}
View(dtw_results_df_jointlead)
